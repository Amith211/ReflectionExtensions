# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  pushPreview: 'internal'
  nugetVersion: ""

stages:
- stage: build
  jobs:
  - job: build
    displayName: 'Run Build'
    pool:
      Default
      #vmImage: 'windows-latest'
    steps:
    - task: GitVersion@4
      inputs:
        preferBundledVersion: true

    - task: Powershell@2
      inputs:
        targetType: inline
        script: gci env:*Git* | sort-object name;

    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.2.300'

    #- task: NuGetToolInstaller@0 # Doesn't require exact Version live above task

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
    #  inputs:
    #    command: 'restore'
    #    #projects: '**/*.csproj'
    #    feedsToUse: 'select'
      
      #script: dotnet restore

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        arguments: '--configuration $(BuildConfiguration)'
        #arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'

#    - task: CopyFiles@2
#      inputs:
#        SourceFolder: '$(Build.SourcesDirectory)'
#        Contents: '**/bin/**'
#        TargetFolder: '$(build.artifactstagingdirectory)\pipelinestest'
        #flattenFolders: true
#        OverWrite: true

    - task: variabledehydration@0
      inputs:
        prefixes: 'GITVERSION,BUILD'
        #output: $(Build.SourcesDirectory)
        output: '$(build.artifactstagingdirectory)'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Artifact drop'
      inputs:
        artifactName: 'vars'
        targetPath: '$(build.artifactstagingdirectory)'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Artifact drop'
      inputs:
        artifactName: 'drop'
        targetPath: '$(Build.SourcesDirectory)'
        #targetPath: '$(Build.ArtifactStagingDirectory)'

        #outpath: '$(Build.ArtifactStagingDirectory)'

#    - task: PublishPipelineArtifact@0
#      displayName: 'Publish Artifact drop'
#      inputs:
#        artifactName: '.netstandard2.0'
#        targetPath: '$(build.artifactstagingdirectory)/netstandard2.0'
    
#    - task: PublishPipelineArtifact@0
#      displayName: 'Publish Artifact drop'
#      inputs:
#        artifactName: '.netcore2.2'
#        targetPath: '$(build.artifactstagingdirectory)/netcoreapp2.2'
        
- stage: Test
  jobs:
  - job: Test
    displayName: 'Run Tests'
    pool:
      default
      #vmImage: 'windows-latest'
    steps:  
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'drop'

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--logger trx --collect "Code coverage"'
        nobuild: true

- stage: DeployPreview
  displayName: 'Deploy Preview Nuget.org'
  jobs:
  - job: NugetPackPreview
    displayName: 'Pack Nuget preview'
    pool:
      Default
      #vmImage: 'windows-latest'
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'vars'
        #targetPath: $(Build.ArtifactStagingDirectory)
        targetPath: '$(Build.SourcesDirectory)'

    - task: variablerehydration@0
      inputs:
        jsonfiles: '**/meta-*.json'

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'drop'
        #targetPath: $(Build.ArtifactStagingDirectory)
        targetPath: '$(Build.SourcesDirectory)'

#    - task: Powershell@2
#      inputs:
#        targetType: inline
#        #script: gci env:*Git* | sort-object name; $(GitVersion.NuGetVersionV2)-Preview$(GitVersion.PreReleaseNumber);
#        script: $env:GitVersion.NuGetVersionV2-Preview$env:GitVersion.PreReleaseNumber;

#    - task: Powershell@2
#      inputs:
#        targetType: inline
#        script: dotnet restore; dotnet pack --no-build --no-restore -property:Configuration=$env:BuildConfiguration,version=$env:GitVersion_NuGetVersionV2-Preview$env:GITVERSION_PRERELEASENUMBER
#        #script: dotnet pack --no-build --no-restore -property:Configuration=Release,version=$env:GitVersion_NuGetVersionV2
#        workingDirectory: $(Build.ArtifactStagingDirectory)

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        restoreSolution: '**/**/*.sln'
        #restoreSolution: '**/$(Build.ArtifactStagingDirectory)/*.sln'
        #projects: '**/$(Build.ArtifactStagingDirectory)/src/**/*.csproj'
        #feedsToUse: 'select'
        #workingDirectory: $(Build.ArtifactStagingDirectory)

    - task: Powershell@2
      displayName: SetNugetSemVerVersion
      inputs:
        targetType: inline
        script: |
            $ver = "";
            if($env:Build.Reason -eq "PullRequest" )
            {
                $ver = "$env:GITVERSION_MAJORMINORPATCH-Beta.$env:GITVERSION_PRERELEASENUMBER";
            } else 
            {
                $ver = $env:GitVersion_NuGetVersionV2;
            }
            echo "##vso[task.setvariable variable=nugetVersion;isOutput=true]$ver" 

    - task: Powershell@2
      displayName: SetNugetSemVerVersion
      inputs:
       targetType: inline
       script: "echo 1; echo $env:nugetVersion; echo 2; echo $(nugetVersion);"

    - task: DotNetCoreCLI@2
      displayName: Pack
      inputs:
        command: 'pack'
        #packagesToPack: '**/$(Build.ArtifactStagingDirectory)/*.sln'
        nobuild: true
        versioningScheme: 'byEnvVar'
        #versioningScheme: 'off'
        #versionEnvVar: GitVersion_NuGetVersionV2
        versionEnvVar: nugetVersion
        configuration: $(BuildConfiguration)
        #workingDirectory: $(Build.ArtifactStagingDirectory)
        packageFolder: $(Build.ArtifactStagingDirectory)/package
        arguments: '--no-build --no-restore'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)'
        Contents: '**/*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Package'
      #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Artifact drop'
      inputs:
        artifactName: 'nuget-preview'
        targetPath: $(Build.ArtifactStagingDirectory)/package
      #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))    

  - deployment: DeployPreview
    displayName: Deploy Preview Nuget.org
    pool:
       name: Default
    environment: Preview
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'nuget-preview'
              targetPath: $(Build.ArtifactStagingDirectory)

          - task: DotNetCoreCLI@2
            displayName: Publish Preview to Artifacts
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: '/b4573900-0d0d-4915-b6b5-cfc2fee08f7d'
            condition: and(succeeded(), contains(variables['pushPreview'], 'internal'))  

          #- task: NuGetCommand@2
          #  inputs:
          #    command: 'push'
          #    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
          #    nuGetFeedType: 'external'
          #    publishFeedCredentials: 'Nuget.org'
          #condition: and(succeeded(), eq(variables['pushPreview'], 'true'))

          ## Task does not support API key yet.
          #- task: DotNetCoreCLI@2
          #  inputs:
          #    command: 'push'
          #    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
          #    nuGetFeedType: 'external'
          #    publishFeedCredentials: 'Nuget.org'
  
  #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))  